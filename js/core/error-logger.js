// js/core/error-logger.js

/**
 * @typedef {Object} ErrorLogDetails
 * @property {Error} [error] - The original error object (optional for warnings/info).
 * @property {string} message - A user-friendly or developer-specific message.
 * @property {string} origin - The module or function where the error originated (e.g., 'QuranApiClient.fetchSurahs').
 * @property {'error' | 'warning' | 'info'} [severity='error'] - The severity of the log.
 * @property {Record<string, any>} [context] - Additional context data (e.g., parameters, state).
 */

const errorLogger = (() => {
  /**
   * Logs the details to the console.
   * @param {ErrorLogDetails} logDetails
   */
  const logToConsole = (logDetails) => {
    const { error, message, origin, severity = 'error', context } = logDetails;

    const timestamp = new Date().toISOString();
    let logOutputParts = [
        `${timestamp} [${severity.toUpperCase()}]`,
        `[${origin || 'UnknownOrigin'}]`, // Add fallback for origin
        message || (error ? error.message : 'Unknown error') // Add fallback for message
    ];
    
    let consoleMethod = console.log; // Default to console.log

    switch (severity) {
      case 'error':
        consoleMethod = console.error;
        break;
      case 'warning':
        consoleMethod = console.warn;
        break;
      case 'info':
        consoleMethod = console.info;
        break;
    }

    // Print main log line
    consoleMethod(logOutputParts.join(' '));

    // Print context if available
    if (context && Object.keys(context).length > 0) {
      try {
        consoleMethod('  Context:', JSON.parse(JSON.stringify(context))); // Deep clone context for logging
      } catch (e) {
        // If context is complex and cannot be easily stringified (e.g., circular references, DOM elements)
        // Log a simpler representation or key parts.
        const simplifiedContext = {};
        for (const key in context) {
            if (Object.hasOwnProperty.call(context, key)) {
                const value = context[key];
                if (typeof value !== 'object' || value === null || Array.isArray(value) || Object.getPrototypeOf(value) === Object.prototype) {
                    simplifiedContext[key] = value;
                } else {
                    simplifiedContext[key] = `[Object type: ${value.constructor ? value.constructor.name : typeof value}]`;
                }
            }
        }
        consoleMethod('  Context (simplified):', simplifiedContext);
        // Original simpler logging:
        // consoleMethod('  Context (raw):', context);
      }
    }

    // Print stack trace if error object exists
    if (error && error.stack) {
      consoleMethod('  Stack Trace:\n', error.stack);
    } else if (error) {
      // If no stack, but an error object was provided, log its string representation
      consoleMethod('  Error Details:', error.toString());
    }
  };

  // Future: Function to send logs to an external service like Sentry or LogRocket
  // const logToExternalService = (logDetails) => {
  //   // Example: if (Sentry && Sentry.captureException) { ... }
  // };

  /**
   * Handles and logs an error. This is the primary method for error-level issues.
   * @param {ErrorLogDetails} logDetails - The details of the error to log.
   */
  const handleError = (logDetails) => {
    // Ensure an Error object exists if severity is 'error' or not provided
    let finalLogDetails = { ...logDetails };
    if ((!finalLogDetails.severity || finalLogDetails.severity === 'error') && !finalLogDetails.error) {
        finalLogDetails.error = new Error(finalLogDetails.message || 'Implicit error generated by handleError');
    }
    logToConsole(finalLogDetails);
    // logToExternalService(finalLogDetails); // For future implementation
  };

  /**
   * Logs a warning message. `error` object is optional.
   * @param {Omit<ErrorLogDetails, 'severity'>} logDetails - Warning details. Error object is optional.
   */
  const logWarning = (logDetails) => {
    handleError({ ...logDetails, severity: 'warning' });
  };

  /**
   * Logs an informational message. `error` object is optional.
   * @param {Omit<ErrorLogDetails, 'severity'>} logDetails - Info details. Error object is optional.
   */
  const logInfo = (logDetails) => {
    handleError({ ...logDetails, severity: 'info' });
  };

  return {
    handleError,
    logWarning,
    logInfo,
  };
})();

export default errorLogger;
